{"version":3,"sources":["variables.js","game.js","players.js","weapons.js","loadGame.js","app.js","gameOver.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxfile":"global.js","sourcesContent":["'use strict';\nconst boardSize = 89;\nconst numObstacles = 10;\nlet squares = [];\nlet remainingSquares = squares;\nlet maxMoves = 3;\nlet newPos;\nlet playerActive;\nlet playerNotActive;\nlet playerActiveDiv;\nlet playerNotActiveDiv;\nlet player1Active = true;\nlet move = true;\nlet attacked = false;\nlet defended = false;\nlet player1Defended = false;\nlet player2Defended = false;\nlet hover = false;\nconst attackButton = $('.attack');\nconst defendButton = $('.defend');\nconst startButton = $('#start');\nconst playAgainButton = $('#play-again');\nconst boardGameDiv = $('#board-game');\nconst gameOverDiv = $('#game-over');\nconst startGameDiv = $('#start-game');\nconst playerContainerDiv = $('.player-container');\nconst body = $('body');\nconst messageDiv = $('.message');\nconst playerNameDiv = $('.player-name');\nconst winnerDiv = $('.winner');\nconst player1AvatarDiv = $('#player-1-avatar');\nconst player2AvatarDiv = $('#player-2-avatar');\nlet computerPlay = false;\nconst alertMove = 'That square is not a valid move. You can only move a max of 3 spaces vertical or horizontal You cant land on a tree or jump over it. Is it even your go?';\nconst alertPlayer = 'you cant land on a player or pass over a player';\nconst alertAttackDefend ='you must attack or defend';\nconst alertMustMove = 'you must move';","'use strict';\n/*--------------------------------------------------------------------------------------------\nCreates a createBoard method on the Gameboard prototype\nAdds the html and css as needed by the size of the board defined above\nThe squares are then pushed to an array so we can later use for calculating positions.\ncreates an obstacle method on the prototype GameBoard\n--------------------------------------------------------------------------------------------*/\nfunction GameBoard(boardSize) {\n    this.boardSize = boardSize;\n}\n\nGameBoard.prototype.createBoard = function () {\n    for (let i = 0; i <= boardSize; i += 1) {\n        boardGameDiv.append('<li class=\"box\" boxID=\"' + i + '\"></li>');\n        let numSquares = $('.box').length;\n        squares.push(numSquares);\n    }\n};\nGameBoard.prototype.obstacles = function (itemClass) {\n    addItem(itemClass)\n};\n\n/*--------------------------------------------------------------------------------------------\nCreates the game\n--------------------------------------------------------------------------------------------*/\nlet game = new GameBoard(boardSize);","'use strict';\n/*--------------------------------------------------------------------------------------------\ncreates a Player class\ncreates a add method on the prototype Player\n--------------------------------------------------------------------------------------------*/\nfunction Player(name, score, itemClass, player, weapon, damage) {\n    this.name = name;\n    this.score = score;\n    this.itemClass = itemClass;\n    this.player = player;\n    this.weapon = weapon;\n    this.damage = damage;\n}\n\nPlayer.prototype.add = function () {\n    addItem(this.itemClass, this.player);\n};\nfunction Avatar(active, notActive, attack, win, dead) {\n    this.active = active;\n    this.notActive = notActive;\n    this.attack = attack;\n    this.win = win;\n    this.dead = dead;\n}\n/*--------------------------------------------------------------------------------------------\nCreates the players\n--------------------------------------------------------------------------------------------*/\nlet player1 = new Player('Player 1', 100, 'player1', 1, 'whiteBelt', 10, 'avatar');\nlet player2 = new Player('Player 2', 100, 'player2', 2, 'whiteBelt', 10, 'avatar');\nlet player1Avatar = new Avatar('src/player1-active.png', 'src/player1-not-active.png', 'src/player1-attack.png', 'src/player1-win.png', 'src/player1-dead.png');\nlet player2Avatar = new Avatar('src/player2-active.png', 'src/player2-not-active.png', 'src/player2-attack.png', 'src/player2-win.png', 'src/player2-dead.png');\n\n/*--------------------------------------------------------------------------------------------\nSets the player Data boxes\n--------------------------------------------------------------------------------------------*/\nfunction setPlayerData(playerDiv, player, weapon) {\n    $(playerDiv + ' .player-name').text(player.name);\n    $(playerDiv + ' .score').text(player.score);\n    $(playerDiv + ' .belt').removeClass().addClass('belt ' + player.weapon);\n    $(playerDiv + ' .weapon-value').text(player.damage);\n    player1AvatarDiv.css('backgroundImage', 'url(' + player1Avatar.active + ')');\n    player2AvatarDiv.css('backgroundImage', 'url(' + player2Avatar.notActive + ')');\n}\n\n\n/*--------------------------------------------------------------------------------------------\non click check if new between old position and new position there is an obstacle\nif there is return - dont let player move\ncheck horizontal move between old position and new position to a max number\nand check vertical move\nif move is possible:\nchange old position to equal new position remove the player class and add to the square clicked\nchange players and get their position\ncheck if pass over a weapon and if so leave old weapon and take new weapon\ncall fight function to see if they can fight\n--------------------------------------------------------------------------------------------*/\n\nfunction movePlayer() {\n    //mouseover the square to see if you want to go there\n    let boxClass = $('.box');\n    boxClass.hover(\n        function () {\n            hover = true;\n            let sqHovered = $(this).attr('boxID');\n            newPos = getXYPosition(sqHovered);\n\n            for (let i = Math.min(oldPos.x, newPos.x); i <= Math.max(oldPos.x, newPos.x); i++) {\n                let num = getSquareValue(i, oldPos.y);\n                let square = $('.box[boxID = ' + num + ']');\n                if (square.hasClass('obstacle')) {\n                    return;\n                }\n                if (player1Active) {\n                    if (square.hasClass('player2')) {\n                        return;\n                    }\n                } else {\n                    if (square.hasClass('player1')) {\n                        return;\n                    }\n                }\n            }\n            for (let i = Math.min(oldPos.y, newPos.y); i <= Math.max(oldPos.y, newPos.y); i++) {\n                let num = getSquareValue(oldPos.x, i);\n                let square = $('.box[boxID = ' + num + ']');\n                if (square.hasClass('obstacle')) {\n                    return;\n                }\n                if (player1Active) {\n                    if (square.hasClass('player2')) {\n                        return;\n                    }\n                } else {\n                    if (square.hasClass('player1')) {\n                        return;\n                    }\n                }\n            }\n            if (!attacked) {\n                if (newPos.y === oldPos.y && newPos.x <= oldPos.x + maxMoves && newPos.x >= oldPos.x - maxMoves\n                    || newPos.x === oldPos.x && newPos.y <= oldPos.y + maxMoves && newPos.y >= oldPos.y - maxMoves) {\n\n                    if (player1Active) {\n                        $(this).css('backgroundImage', 'url(' + player1Avatar.active + ')');\n\n                    } else {\n                        $(this).css('backgroundImage', 'url(' + player2Avatar.active + ')');\n                    }\n                }\n\n            }\n        }, function () {\n            hover = false;\n            $(this).css('backgroundImage', '');\n        }\n    );\n\n    function alertMessage(message){\n        if(move){\n            alert(message);\n        }else{\n            alert(alertAttackDefend);\n        }\n    }\n\n\n    boxClass.on('click', function (e) {\n        hover = false;\n        let sqClicked = $(this).attr('boxID');\n        newPos = getXYPosition(sqClicked);\n\n        for (let i = Math.min(oldPos.x, newPos.x); i <= Math.max(oldPos.x, newPos.x); i++) {\n            let num = getSquareValue(i, oldPos.y);\n            let square = $('.box[boxID = ' + num + ']');\n            if (square.hasClass('obstacle')) {\n                alertMessage(alertMove);\n                return;\n            }\n            if (player1Active) {\n                if (square.hasClass('player2')) {\n                    alertMessage(alertPlayer);\n                    return;\n                }\n            } else {\n                if (square.hasClass('player1')) {\n                    alertMessage(alertPlayer);\n                    return;\n                }\n            }\n        }\n        for (let i = Math.min(oldPos.y, newPos.y); i <= Math.max(oldPos.y, newPos.y); i++) {\n            let num = getSquareValue(oldPos.x, i);\n            let square = $('.box[boxID = ' + num + ']');\n            if (square.hasClass('obstacle')) {\n                alertMessage(alertMove);\n                return;\n            }\n\n            if (player1Active) {\n                if (square.hasClass('player2')) {\n                    alertMessage(alertPlayer);\n                    return;\n                }\n            } else {\n                if (square.hasClass('player1')) {\n                    alertMessage(alertPlayer);\n                    return;\n                }\n            }\n        }\n        if (player1Active) {\n            if ($(this).hasClass('player1')){\n                alertMessage(alertMustMove);\n                return;\n            }\n        }else{\n            if ($(this).hasClass('player2')){\n                alertMessage(alertMustMove);\n                return;\n            }\n        }\n\n\n        if (move) {\n            if (newPos.y === oldPos.y && newPos.x <= oldPos.x + maxMoves && newPos.x >= oldPos.x - maxMoves\n                || newPos.x === oldPos.x && newPos.y <= oldPos.y + maxMoves && newPos.y >= oldPos.y - maxMoves) {\n                for (let i = Math.min(oldPos.x, newPos.x); i <= Math.max(oldPos.x, newPos.x); i++) {\n                    let num = getSquareValue(i, oldPos.y);\n                    checkWeapon(num);\n                }\n                for (let i = Math.min(oldPos.y, newPos.y); i <= Math.max(oldPos.y, newPos.y); i++) {\n                    let num = getSquareValue(oldPos.x, i);\n                    checkWeapon(num);\n                }\n                whoIsActive();\n                if (player1Active) {\n                    playerPosition = getPosition('.player2');\n                    oldPos = getXYPosition(playerPosition);\n                    $('.player1').removeClass('player1').removeClass('active');\n                    $(this).addClass(\"player1\");\n                    $('.player2').addClass('active');\n                    fight(newPos, oldPos);\n                    player1Active = false;\n\n                }else if(computerPlay){\n                    //call function for computers turn.\n                    //while squreclaimed is false\n                    //if square is not valid return\n                    //while square is not claimed claim square\n                    //once its claimed change player\n                    //to calculate move - if square has weapon take square\n                    //else randomly move 3 spaces\n                    //set squareclaimed to true\n                    player1Active = true;\n                }else {\n                    playerPosition = getPosition('.player1');\n                    oldPos = getXYPosition(playerPosition);\n                    $('.player2').removeClass('player2').removeClass('active');\n                    $(this).addClass(\"player2\");\n                    $('.player1').addClass('active');\n                    fight(newPos, oldPos);\n                    player1Active = true;\n                }\n            }\n        }\n    });\n}\n/*--------------------------------------------------------------------------------------------\nget the player that is active\n--------------------------------------------------------------------------------------------*/\nfunction GetPlayerActive(Active, NotActive, ActiveDiv, NotActiveDiv, activeAvatar, notActiveAvatar) {\n    playerActive = Active;\n    playerNotActive = NotActive;\n    playerActiveDiv = ActiveDiv;\n    playerNotActiveDiv = NotActiveDiv;\n    $(NotActiveDiv + ' .player-avatar').css('backgroundImage', 'url(' + activeAvatar + ')');\n    $(ActiveDiv + ' .player-avatar').css('backgroundImage', 'url(' + notActiveAvatar + ')');\n}\n\n/*--------------------------------------------------------------------------------------------\nif player 1 is active set values else set player 2 values\n--------------------------------------------------------------------------------------------*/\nfunction whoIsActive() {\n    if (player1Active) {\n        GetPlayerActive(player1, player2, '#player-1', '#player-2', player2Avatar.active, player1Avatar.notActive);\n    } else {\n        GetPlayerActive(player2, player1, '#player-2', '#player-1', player1Avatar.active, player2Avatar.notActive);\n    }\n}","'use strict';\n/*--------------------------------------------------------------------------------------------\ncreates a Weapon class\ncreates a add method on the prototype Weapon\n--------------------------------------------------------------------------------------------*/\nfunction Weapon(type, value, itemClass) {\n    this.type = type;\n    this.value = value;\n    this.itemClass = itemClass;\n}\n\nWeapon.prototype.add = function () {\n    addItem(this.itemClass);\n};\n\n/*--------------------------------------------------------------------------------------------\nCreates the weapons and players\n--------------------------------------------------------------------------------------------*/\n\nlet blackBelt = new Weapon('BlackBelt', 70, 'blackBelt weapon', 'avatarWin');\nlet redBelt = new Weapon('RedBelt', 60, 'redBelt weapon');\nlet blueBelt = new Weapon('BlueBelt', 40, 'blueBelt weapon');\nlet greenBelt = new Weapon('GreenBelt', 30, 'greenBelt weapon');\nlet yellowBelt = new Weapon('YellowBelt', 20, 'yellowBelt weapon');\nlet whiteBelt = new Weapon('WhiteBelt', 10, 'whiteBelt weapon');\nlet combat1 = new Weapon('combat1', 40, 'combat1 weapon');\nlet combat2 = new Weapon('combat2', 20, 'combat2 weapon');\nlet combat3 = new Weapon('combat3', 30, 'combat3 weapon');\nlet combat4 = new Weapon('combat4', 30, 'combat3 weapon');\nlet scroll = new Weapon('scroll', 20, 'scroll weapon');\n\n/*--------------------------------------------------------------------------------------------\nChange players weapon value\n--------------------------------------------------------------------------------------------*/\nfunction changeWeaponValue(playerDiv, player, weapon) {\n    player.damage = weapon.value;\n    $(playerDiv + ' .weapon-value').text(player.damage);\n}\n\nfunction removePlayerWeapon(playerActiveDiv, playerActive) {\n    $(playerActiveDiv + ' .belt').removeClass(playerActive.weapon);\n}\n\nfunction addPlayerWeapon(playerActiveDiv, playerActive) {\n    $(playerActiveDiv + ' .belt').addClass(playerActive.weapon);\n}\n/*--------------------------------------------------------------------------------------------\nFind out who is active, remove the weapon from the square, remove players old weapon\nset players weapon = to weapon from square, add the player weapon and new weapon value\n--------------------------------------------------------------------------------------------*/\nfunction changeWeapon(num, belt, weapon) {\n    let square = $('.box[boxID = ' + num + ']');\n    whoIsActive();\n    square.removeClass(belt).addClass(playerActive.weapon);\n    removePlayerWeapon(playerActiveDiv, playerActive);\n    playerActive.weapon = belt;\n    addPlayerWeapon(playerActiveDiv, playerActive);\n    changeWeaponValue(playerActiveDiv, playerActive, weapon, weapon.value);\n}\n\nfunction extraPoints(playerActive, playerActiveDiv, item, itemClass, gain, text1, text2) {\n    if (gain) {\n        playerActive.score = playerActive.score + item.value;\n    } else {\n        playerActive.score = playerActive.score - item.value;\n    }\n    $(playerActiveDiv + ' .score').text(playerActive.score);\n    $('.' + itemClass).removeClass(itemClass + ' weapon');\n    $(playerActiveDiv + ' .message').text(text1 + text2 + ' ' + item.value);\n}\n/*--------------------------------------------------------------------------------------------\nif there is a weapon see which one and call change Weapon function\n--------------------------------------------------------------------------------------------*/\nfunction checkWeapon(num) {\n    let square = $('.box[boxID = ' + num + ']');\n    if (square.hasClass('weapon')) {\n        if (square.hasClass('combat1')) {\n            whoIsActive();\n            extraPoints(playerActive, playerActiveDiv, combat1, 'combat1', true, 'You just beat the penguin and ', 'got');\n            return;\n        }\n        if (square.hasClass('combat2')) {\n            whoIsActive();\n            extraPoints(playerActive, playerActiveDiv, combat2, 'combat2', false, 'You just lost against the penguin and ', 'lost');\n            return;\n        }\n        if (square.hasClass('combat3')) {\n            whoIsActive();\n            extraPoints(playerActive, playerActiveDiv, combat3, 'combat3', true, 'You just beat the penguin and ', 'got');\n            return;\n        }\n        if (square.hasClass('combat4')) {\n            whoIsActive();\n            extraPoints(playerActive, playerActiveDiv, combat4, 'combat4', false, 'You just lost against the penguin and ', 'lost');\n            return;\n        }\n        if (square.hasClass('scroll')) {\n            whoIsActive();\n            extraPoints(playerActive, playerActiveDiv, scroll, 'scroll', true, 'You just did a seminar and ', 'got');\n            return;\n        }\n        if (square.hasClass('whiteBelt')) {\n            changeWeapon(num, 'whiteBelt', whiteBelt);\n            return;\n        }\n        if (square.hasClass('yellowBelt')) {\n            changeWeapon(num, 'yellowBelt', yellowBelt);\n            return;\n        }\n        if (square.hasClass('greenBelt')) {\n            changeWeapon(num, 'greenBelt', greenBelt);\n            return;\n        }\n        if (square.hasClass('blueBelt')) {\n            changeWeapon(num, 'blueBelt', blueBelt);\n            return;\n        }\n        if (square.hasClass('redBelt')) {\n            changeWeapon(num, 'redBelt', redBelt);\n            return;\n        }\n        if (square.hasClass('blackBelt')) {\n            changeWeapon(num, 'blackBelt', blackBelt);\n            return;\n        }\n    }\n}","'use strict';\n/*--------------------------------------------------------------------------------------------\nSquares array is equal to all the squares (all have class box)\nWhile the square is empty\nitem gets a random number between 1 and the boardsize\nAdd an item based on criteria, position 1 is player 1 and position 2 is player 2\nplayer 1 must be placed on the far left of the game and player 2 on the far right\nthe rest of things to be placed not on the far right or far left of the board\nthen check that the criteria(square) is ok and the remaining squares available includes the square\nif it does take it out of the remaining squares array and add the correct class to the square\nthen make empty equal to false to stop the while loop\n--------------------------------------------------------------------------------------------*/\nfunction addItem(itemClass, player) {\n    squares = [];\n    let boxes = $('.box');\n    let empty = true;\n    while (empty) {\n        let item = getRandom(boardSize);\n        let criteria;\n        if (player === 1) {\n            criteria = (item % 10 === 0);\n        } else if (player === 2) {\n            criteria = (item % 10 === 9);\n        } else {\n            criteria = (item % 10 !== 0 && item % 10 !== 9);\n        }\n        if (criteria && remainingSquares.includes(item)) {\n            boxes.eq(item).addClass(itemClass);\n            let index = remainingSquares.indexOf(item);\n            remainingSquares.splice(index, 1);\n            empty = false;\n        }\n    }\n}\n\n/*--------------------------------------------------------------------------------------------\nloads everything needed to make the game\n--------------------------------------------------------------------------------------------*/\nfunction loadGame() {\n    game.createBoard();\n    for (let i = 0; i < numObstacles; i += 1) {\n        game.obstacles('obstacle');\n    }\n\n    blackBelt.add();\n    redBelt.add();\n    blueBelt.add();\n    greenBelt.add();\n    yellowBelt.add();\n    player1.add();\n    player2.add();\n    combat1.add();\n    combat2.add();\n    combat3.add();\n    combat4.add();\n    scroll.add();\n    setPlayerData('#player-1', player1);\n    setPlayerData('#player-2', player2);\n    $('.player1').addClass('active');\n}","'use strict';\n/*--------------------------------------------------------------------------------------------\nGame is created by a fixed size of 800px and each square being 75px so it will always\nhave 10 squares across but it can have any amount of squares so the game can be longer if needed\nhowever it should always be in multiples of 10\nFor this demo we have chosen to have 90 squares but feel free to change the number\nThe squares array is empty but will be filled later once the board is created with the amount of squares\nThe remainingSquares array is equal to the squares array and will be modified every time we fill a square\n*/\n\nattackButton.hide();\ndefendButton.hide();\nplayerContainerDiv.hide();\nboardGameDiv.hide();\ngameOverDiv.hide();\n\nstartButton.on('click', function () {\n    playerContainerDiv.show();\n    playerContainerDiv.css('display', 'flex');\n    boardGameDiv.show();\n    startGameDiv.hide();\n    body.css(\"background-color\", \"white\")\n});\n\n\nfunction getRandom(num) {\n    return Math.floor(Math.random() * num);\n}\n\n\nloadGame();\nmovePlayer();\n\n\n/*--------------------------------------------------------------------------------------------\nget x,y value for each square\nget position of the player\nconvert x y to square value\n--------------------------------------------------------------------------------------------*/\nfunction getXYPosition(square) {\n    return {\n        x: (square) % 10\n        ,\n        y: Math.floor((square) / 10)\n    }\n}\n\nconst getPosition = (itemClass) => {\n    return $(itemClass).attr('boxID');\n};\nlet playerPosition = getPosition('.player1');\nlet oldPos = getXYPosition(playerPosition);\n\nfunction getSquareValue(xPos, yPos) {\n    return yPos * 10 + xPos;\n}\n\n/*--------------------------------------------------------------------------------------------\nif player can attack and defend show buttons depending on which player is active\n--------------------------------------------------------------------------------------------*/\nfunction CanAttackAndDefend(playerActiveDiv, playerNotActiveDiv) {\n    $(playerNotActiveDiv + ' .attack').show();\n    $(playerNotActiveDiv + ' .defend').show();\n    $(playerActiveDiv + ' .attack').hide();\n    $(playerActiveDiv + ' .defend').hide();\n}\n\n/*--------------------------------------------------------------------------------------------\nprint message depending on which player is active\n--------------------------------------------------------------------------------------------*/\nfunction message(playerActiveDiv, playerNotActiveDiv, playerActive, playerNotActive) {\n    $(playerNotActiveDiv + ' .message').text(playerActive.name + ' just hit you  - ' + playerActive.damage + ' points');\n    $(playerActiveDiv + ' .message').text('You just attacked');\n}\n\n\n\n/*--------------------------------------------------------------------------------------------\nif player can only attack show attack button and hide defend depending on which player is active\n--------------------------------------------------------------------------------------------*/\nfunction CanOnlyAttack(playerActiveDiv, playerNotActiveDiv) {\n    $(playerNotActiveDiv + ' .attack').show();\n    $(playerActiveDiv + ' .attack').show();\n    $(playerNotActiveDiv + ' .defend').hide();\n    $(playerActiveDiv + ' .defend').hide();\n}\n\n/*--------------------------------------------------------------------------------------------\nonce fight begins set move to false so player can't move and can only fight\n--------------------------------------------------------------------------------------------*/\nfunction fight(newPos, oldPos) {\n\n    if (newPos.y === oldPos.y && newPos.x <= oldPos.x + 1 && newPos.x >= oldPos.x - 1\n        || newPos.x === oldPos.x && newPos.y <= oldPos.y + 1 && newPos.y >= oldPos.y - 1) {\n        move = false;\n        hover = false;\n        $('.box').css('cursor', 'not-allowed');\n        $(this).css('backgroundImage', '');\n\n        for (let i = Math.min(oldPos.x, newPos.x); i <= Math.max(oldPos.x, newPos.x); i++) {\n            let num = getSquareValue(i, oldPos.y);\n            let square = $('.box[boxID = ' + num + ']');\n            if (player1Active) {\n                if (square.hasClass('player2')) {\n                    attacked = true;\n                    attack(newPos, oldPos);\n                    return;\n                }\n\n            } else {\n                if (square.hasClass('player1')) {\n                    attacked = true;\n                    attack(newPos, oldPos);\n                    return;\n                }\n            }\n        }\n    }\n}\n\n/*--------------------------------------------------------------------------------------------\nChange the score when attacked or defended\n--------------------------------------------------------------------------------------------*/\nfunction changeScore(playerNotActiveDiv, playerActive, playerNotActive) {\n    if (defended) {\n        playerNotActive.score = playerNotActive.score - playerActive.damage * .5;\n        defended = false;\n    } else {\n        playerNotActive.score = playerNotActive.score - playerActive.damage;\n    }\n\n    $(playerNotActiveDiv + ' .score').text(playerNotActive.score);\n}\n\n/*--------------------------------------------------------------------------------------------\nif attacked is true, see who is active and change score, show buttons and call message\nthen set player to inactive and defended to false incase they defended last time giving them\nthe possibility to defend again\n--------------------------------------------------------------------------------------------*/\nfunction attack() {\n    if (attacked) {\n        whoIsActive();\n        changeScore(playerNotActiveDiv, playerActive, playerNotActive);\n        CanAttackAndDefend(playerActiveDiv, playerNotActiveDiv);\n        message(playerActiveDiv, playerNotActiveDiv, playerActive, playerNotActive);\n        player1AvatarDiv.css('backgroundImage', 'url(' + player1Avatar.attack + ')');\n        player2AvatarDiv.css('backgroundImage', 'url(' + player2Avatar.attack + ')');\n        if (player1Active) {\n            activeClass('.player1', '.player2');\n            player1Defended = false;\n            player1Active = false;\n        } else {\n            activeClass('.player2', '.player1');\n            player2Defended = false;\n            player1Active = true;\n        }\n        if (playerNotActive.score <= 0) {\n            gameOver(playerActiveDiv, playerNotActiveDiv, playerActive, playerNotActive)\n        }\n    }\n}\nfunction activeClass(playerActiveClass, playerNotActiveClass){\n    $(playerActiveClass).removeClass('active');\n    $(playerNotActiveClass).addClass('active');\n}\n\n/*--------------------------------------------------------------------------------------------\nif player clicks defend see who is active and set values\nif both players choose to defend hide defend option and make them attack\n--------------------------------------------------------------------------------------------*/\nfunction defend() {\n    defended = true;\n    whoIsActive();\n    if (player1Active) {\n        activeClass('.player1', '.player2');\n        player1Defended = true;\n        player1Active = false;\n    } else {\n        activeClass('.player2', '.player1');\n        player2Defended = true;\n        player1Active = true;\n    }\n    if (player1Defended && player2Defended) {\n        CanOnlyAttack(playerActiveDiv, playerNotActiveDiv)\n    } else {\n        CanAttackAndDefend(playerActiveDiv, playerNotActiveDiv)\n    }\n    $(playerActiveDiv + ' .message').text('you just defended');\n}\n\n\n/*--------------------------------------------------------------------------------------------\nclick buttons for attack and defend\n--------------------------------------------------------------------------------------------*/\nattackButton.on('click', function () {\n    attack(newPos, oldPos);\n    attacked = true;\n});\ndefendButton.on('click', function () {\n    defend(newPos, oldPos);\n    defended = true;\n});\n\n","'use strict';\n/*--------------------------------------------------------------------------------------------\nWhen game is over click play again and reset values to create new board and play again\n--------------------------------------------------------------------------------------------*/\nplayAgainButton.on('click', function (e) {\n    messageDiv.removeClass('win');\n    body.css('background-color', '#fff');\n    gameOverDiv.hide();\n    boardGameDiv.show();\n    player1 = new Player('Player 1', 100, 'player1', 1, 'whiteBelt', 10);\n    player2 = new Player('Player 2', 100, 'player2', 2, 'whiteBelt', 10);\n    player1Active = true;\n    move = true;\n    attacked = false;\n    defended = false;\n    player1Defended = false;\n    player2Defended = false;\n    $(playerNotActiveDiv + ' .message').text('');\n    $(playerActiveDiv + ' .message').text('');\n    playerNameDiv.css('color', '');\n    $('.player-avatar').css('width', '75px').css('height', '75px');\n    loadGame();\n    playerPosition = getPosition('.player1');\n    oldPos = getXYPosition(playerPosition);\n    movePlayer();\n});\n\n/*--------------------------------------------------------------------------------------------\nif game is over set values depending on which player is active\n--------------------------------------------------------------------------------------------*/\nfunction gameOver(playerActiveDiv, playerNotActiveDiv, playerActive, playerNotActive,) {\n    $(playerNotActiveDiv + ' .score').text('0');\n    $(playerActiveDiv + ' .message').text('You Win');\n    $(playerNotActiveDiv + ' .message').text('You Lose');\n    $(playerNotActiveDiv + ' .attack').hide();\n    $(playerNotActiveDiv + ' .defend').hide();\n    if (player1Active) {\n        $(playerNotActiveDiv + ' .player-avatar').css('backgroundImage', 'url(' + player1Avatar.dead + ')');\n        $(playerActiveDiv + ' .player-avatar').css('backgroundImage', 'url(' + player2Avatar.win + ')').css('width', '150px').css('height', '150px');\n    } else {\n        $(playerNotActiveDiv + ' .player-avatar').css('backgroundImage', 'url(' + player2Avatar.dead + ')');\n        $(playerActiveDiv + ' .player-avatar').css('backgroundImage', 'url(' + player1Avatar.win + ')').css('width', '150px').css('height', '150px');\n    }\n    $('.box').remove();\n    boardGameDiv.hide();\n    gameOverDiv.show();\n    body.css('background-color', '#ff6666');\n    playerNameDiv.css('color', '#fff');\n    messageDiv.addClass('win');\n    winnerDiv.text(playerActive.name + ' you are the WINNER');\n}"]}